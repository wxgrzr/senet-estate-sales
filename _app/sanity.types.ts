/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Faqs = {
  _id: string;
  _type: 'faqs';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  items?: Array<{
    question: string;
    answer: string;
    _key: string;
  }>;
};

export type Reviews = {
  _id: string;
  _type: 'reviews';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  items?: Array<{
    name?: string;
    rating: number;
    review: string;
    _key: string;
  }>;
};

export type ContactInfo = {
  _id: string;
  _type: 'contactInfo';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  phoneNumber?: string;
  address?: {
    addressLine1?: string;
    addressLine2?: string;
  };
  emailAddress?: string;
  facebookUrl?: string;
  yelpUrl?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
    _key: string;
  }>;
  location: {
    streetAddress?: string;
    city?: string;
    state?:
      | 'AL'
      | 'AK'
      | 'AZ'
      | 'AR'
      | 'CA'
      | 'CO'
      | 'CT'
      | 'DE'
      | 'FL'
      | 'GA'
      | 'HI'
      | 'ID'
      | 'IL'
      | 'IN'
      | 'IA'
      | 'KS'
      | 'KY'
      | 'LA'
      | 'ME'
      | 'MD'
      | 'MA'
      | 'MI'
      | 'MN'
      | 'MS'
      | 'MO'
      | 'MT'
      | 'NE'
      | 'NV'
      | 'NH'
      | 'NJ'
      | 'NM'
      | 'NY'
      | 'NC'
      | 'ND'
      | 'OH'
      | 'OK'
      | 'OR'
      | 'PA'
      | 'RI'
      | 'SC'
      | 'SD'
      | 'TN'
      | 'TX'
      | 'UT'
      | 'VT'
      | 'VA'
      | 'WA'
      | 'WV'
      | 'WI'
      | 'WY';
    zip?: string;
    fullAddress?: string;
    coordinates?: Geopoint;
  };
  eventDates?: Array<string>;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  category: 'upcoming' | 'completed' | 'hidden';
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Faqs
  | Reviews
  | ContactInfo
  | Post
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = null;
// Variable: contactInfoQuery
// Query: *[_type == "contactInfo"][0]
export type ContactInfoQueryResult = {
  _id: string;
  _type: 'contactInfo';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  phoneNumber?: string;
  address?: {
    addressLine1?: string;
    addressLine2?: string;
  };
  emailAddress?: string;
  facebookUrl?: string;
  yelpUrl?: string;
} | null;
// Variable: testimonialQuery
// Query: *[_type == "reviews"][0]{  items[]{    rating,    review,    name  }}
export type TestimonialQueryResult = {
  items: Array<{
    rating: number;
    review: string;
    name: string | null;
  }> | null;
} | null;
// Variable: faqQuery
// Query: *[_type == "faqs"][0]{  items[] {    question,    answer  }}
export type FaqQueryResult = {
  items: Array<{
    question: string;
    answer: string;
  }> | null;
} | null;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current) && category == "upcoming"] |  order(date desc, _createdAt desc) {      _id,  _updatedAt,  "title": coalesce(title, "Untitled Estate Sale"),  "slug": slug.current,  coverImage,  eventDates,  location {    fullAddress,    coordinates {      lat,      lng    }  }  }
export type AllPostsQueryResult = Array<{
  _id: string;
  _updatedAt: string;
  title: string;
  slug: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  eventDates: Array<string> | null;
  location: {
    fullAddress: string | null;
    coordinates: {
      lat: number | null;
      lng: number | null;
    } | null;
  };
}>;
// Variable: slicedPostsQuery
// Query: *[  _type == "post" && defined(slug.current) && category == "upcoming"]|order(_createdAt desc)[0...12]{_id, title, slug, coverImage, location, eventDates}
export type SlicedPostsQueryResult = Array<{
  _id: string;
  title: string;
  slug: Slug;
  coverImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  location: {
    streetAddress?: string;
    city?: string;
    state?:
      | 'AK'
      | 'AL'
      | 'AR'
      | 'AZ'
      | 'CA'
      | 'CO'
      | 'CT'
      | 'DE'
      | 'FL'
      | 'GA'
      | 'HI'
      | 'IA'
      | 'ID'
      | 'IL'
      | 'IN'
      | 'KS'
      | 'KY'
      | 'LA'
      | 'MA'
      | 'MD'
      | 'ME'
      | 'MI'
      | 'MN'
      | 'MO'
      | 'MS'
      | 'MT'
      | 'NC'
      | 'ND'
      | 'NE'
      | 'NH'
      | 'NJ'
      | 'NM'
      | 'NV'
      | 'NY'
      | 'OH'
      | 'OK'
      | 'OR'
      | 'PA'
      | 'RI'
      | 'SC'
      | 'SD'
      | 'TN'
      | 'TX'
      | 'UT'
      | 'VA'
      | 'VT'
      | 'WA'
      | 'WI'
      | 'WV'
      | 'WY';
    zip?: string;
    fullAddress?: string;
    coordinates?: Geopoint;
  };
  eventDates: Array<string> | null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)]    | order(date desc, _updatedAt desc) [0...$limit] {      _id,  _updatedAt,  "title": coalesce(title, "Untitled Estate Sale"),  "slug": slug.current,  coverImage,  eventDates,  location {    fullAddress,    coordinates {      lat,      lng    }  }  }
export type MorePostsQueryResult = Array<{
  _id: string;
  _updatedAt: string;
  title: string;
  slug: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  eventDates: Array<string> | null;
  location: {
    fullAddress: string | null;
    coordinates: {
      lat: number | null;
      lng: number | null;
    } | null;
  };
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    body[]{...},    gallery[]{...},      _id,  _updatedAt,  "title": coalesce(title, "Untitled Estate Sale"),  "slug": slug.current,  coverImage,  eventDates,  location {    fullAddress,    coordinates {      lat,      lng    }  }  }
export type PostQueryResult = {
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
  gallery: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
    _key: string;
  }> | null;
  _id: string;
  _updatedAt: string;
  title: string;
  slug: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  eventDates: Array<string> | null;
  location: {
    fullAddress: string | null;
    coordinates: {
      lat: number | null;
      lng: number | null;
    } | null;
  };
} | null;
// Variable: markerPostsQuery
// Query: *[    _type == "post" &&    defined(slug.current) &&    category == "upcoming" &&    defined(location.coordinates.lat) &&    defined(location.coordinates.lng)  ]{    _id,    "title": coalesce(title, "Untitled Estate Sale"),    "slug": slug.current,    location {      fullAddress,      coordinates {        lat,        lng      }    }  }
export type MarkerPostsQueryResult = Array<{
  _id: string;
  title: string;
  slug: string;
  location: {
    fullAddress: string | null;
    coordinates: {
      lat: number | null;
      lng: number | null;
    } | null;
  };
}>;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: sitemapData
// Query: *[_type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: 'post';
  _updatedAt: string;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "settings"][0]': SettingsQueryResult;
    '*[_type == "contactInfo"][0]': ContactInfoQueryResult;
    '*[_type == "reviews"][0]{\n  items[]{\n    rating,\n    review,\n    name\n  }\n}': TestimonialQueryResult;
    '*[_type == "faqs"][0]{\n  items[] {\n    question,\n    answer\n  }\n}': FaqQueryResult;
    '\n  *[_type == "post" && defined(slug.current) && category == "upcoming"] |\n  order(date desc, _createdAt desc) {\n    \n  _id,\n  _updatedAt,\n  "title": coalesce(title, "Untitled Estate Sale"),\n  "slug": slug.current,\n  coverImage,\n  eventDates,\n  location {\n    fullAddress,\n    coordinates {\n      lat,\n      lng\n    }\n  }\n\n  }\n': AllPostsQueryResult;
    '*[\n  _type == "post" && defined(slug.current) && category == "upcoming"\n]|order(_createdAt desc)[0...12]{_id, title, slug, coverImage, location, eventDates}': SlicedPostsQueryResult;
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)]\n    | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  _updatedAt,\n  "title": coalesce(title, "Untitled Estate Sale"),\n  "slug": slug.current,\n  coverImage,\n  eventDates,\n  location {\n    fullAddress,\n    coordinates {\n      lat,\n      lng\n    }\n  }\n\n  }\n': MorePostsQueryResult;
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    body[]{...},\n    gallery[]{...},\n    \n  _id,\n  _updatedAt,\n  "title": coalesce(title, "Untitled Estate Sale"),\n  "slug": slug.current,\n  coverImage,\n  eventDates,\n  location {\n    fullAddress,\n    coordinates {\n      lat,\n      lng\n    }\n  }\n\n  }\n': PostQueryResult;
    '\n  *[\n    _type == "post" &&\n    defined(slug.current) &&\n    category == "upcoming" &&\n    defined(location.coordinates.lat) &&\n    defined(location.coordinates.lng)\n  ]{\n    _id,\n    "title": coalesce(title, "Untitled Estate Sale"),\n    "slug": slug.current,\n    location {\n      fullAddress,\n      coordinates {\n        lat,\n        lng\n      }\n    }\n  }\n': MarkerPostsQueryResult;
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult;
    '\n  *[_type == "post" && defined(slug.current)] | order(_type asc) {\n    "slug": slug.current,\n    _type,\n    _updatedAt,\n  }\n': SitemapDataResult;
  }
}
